
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000980  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b28  08000b30  00010b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b28  08000b28  00010b30  2**0
                  CONTENTS
  4 .ARM          00000000  08000b28  08000b28  00010b30  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b28  08000b30  00010b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b28  08000b28  00010b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b2c  08000b2c  00010b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010b30  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010b30  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000aed  00000000  00000000  00010b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002a4  00000000  00000000  0001164d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  000118f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000a0  00000000  00000000  000119c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001424  00000000  00000000  00011a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ea8  00000000  00000000  00012e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000056f9  00000000  00000000  00013d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00019425  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000268  00000000  00000000  00019478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000b10 	.word	0x08000b10

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000b10 	.word	0x08000b10

080001e8 <GPIO_PeriClockControl>:
 * @note
 *
 * */
// Peripheral clock setup
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 80001f4:	78fb      	ldrb	r3, [r7, #3]
 80001f6:	2b01      	cmp	r3, #1
 80001f8:	d162      	bne.n	80002c0 <GPIO_PeriClockControl+0xd8>
	{
		if (pGPIOx == GPIOA)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a64      	ldr	r2, [pc, #400]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d106      	bne.n	8000210 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000202:	4b64      	ldr	r3, [pc, #400]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000206:	4a63      	ldr	r2, [pc, #396]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DIS();
		}
	}

}
 800020e:	e0b9      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4a61      	ldr	r2, [pc, #388]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 8000214:	4293      	cmp	r3, r2
 8000216:	d106      	bne.n	8000226 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000218:	4b5e      	ldr	r3, [pc, #376]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a5d      	ldr	r2, [pc, #372]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000224:	e0ae      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a5c      	ldr	r2, [pc, #368]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800022e:	4b59      	ldr	r3, [pc, #356]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000234:	f043 0304 	orr.w	r3, r3, #4
 8000238:	6313      	str	r3, [r2, #48]	; 0x30
}
 800023a:	e0a3      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a58      	ldr	r2, [pc, #352]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000244:	4b53      	ldr	r3, [pc, #332]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000250:	e098      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a53      	ldr	r2, [pc, #332]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800025a:	4b4e      	ldr	r3, [pc, #312]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000266:	e08d      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4f      	ldr	r2, [pc, #316]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000270:	4b48      	ldr	r3, [pc, #288]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000276:	f043 0320 	orr.w	r3, r3, #32
 800027a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027c:	e082      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a4a      	ldr	r2, [pc, #296]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000286:	4b43      	ldr	r3, [pc, #268]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800028c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000292:	e077      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a46      	ldr	r2, [pc, #280]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800029c:	4b3d      	ldr	r3, [pc, #244]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a8:	e06c      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a41      	ldr	r2, [pc, #260]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d168      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80002b2:	4b38      	ldr	r3, [pc, #224]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002be:	e061      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		if (pGPIOx == GPIOA)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a33      	ldr	r2, [pc, #204]	; (8000390 <GPIO_PeriClockControl+0x1a8>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d106      	bne.n	80002d6 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DIS();
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002ce:	f023 0301 	bic.w	r3, r3, #1
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d4:	e056      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOB)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2f      	ldr	r2, [pc, #188]	; (8000398 <GPIO_PeriClockControl+0x1b0>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DIS();
 80002de:	4b2d      	ldr	r3, [pc, #180]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002e4:	f023 0302 	bic.w	r3, r3, #2
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ea:	e04b      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOC)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2b      	ldr	r2, [pc, #172]	; (800039c <GPIO_PeriClockControl+0x1b4>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DIS();
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 80002fa:	f023 0304 	bic.w	r3, r3, #4
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e040      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOD)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a26      	ldr	r2, [pc, #152]	; (80003a0 <GPIO_PeriClockControl+0x1b8>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DIS();
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000310:	f023 0308 	bic.w	r3, r3, #8
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e035      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOE)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a22      	ldr	r2, [pc, #136]	; (80003a4 <GPIO_PeriClockControl+0x1bc>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DIS();
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000326:	f023 0310 	bic.w	r3, r3, #16
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e02a      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOF)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1d      	ldr	r2, [pc, #116]	; (80003a8 <GPIO_PeriClockControl+0x1c0>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DIS();
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800033c:	f023 0320 	bic.w	r3, r3, #32
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e01f      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOG)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a19      	ldr	r2, [pc, #100]	; (80003ac <GPIO_PeriClockControl+0x1c4>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DIS();
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e014      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOH)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <GPIO_PeriClockControl+0x1c8>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DIS();
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 8000368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e009      	b.n	8000384 <GPIO_PeriClockControl+0x19c>
		}else if (pGPIOx == GPIOI)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a10      	ldr	r2, [pc, #64]	; (80003b4 <GPIO_PeriClockControl+0x1cc>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DIS();
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	; (8000394 <GPIO_PeriClockControl+0x1ac>)
 800037e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00
 80003b4:	40022000 	.word	0x40022000

080003b8 <GPIO_Init>:
// init and de init
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b087      	sub	sp, #28
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	// on github GPIO_PeriClockControl is called here, check final version later

	// initialize port and pin

	// 1. configure mode of gpio pin
	if( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) // it is not an interrupt mode
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	795b      	ldrb	r3, [r3, #5]
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	d820      	bhi.n	800040a <GPIO_Init+0x52>
	{
		// Need to reset the bit first before we set them
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	791b      	ldrb	r3, [r3, #4]
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	2103      	movs	r1, #3
 80003d6:	fa01 f303 	lsl.w	r3, r1, r3
 80003da:	43db      	mvns	r3, r3
 80003dc:	4619      	mov	r1, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	400a      	ands	r2, r1
 80003e4:	601a      	str	r2, [r3, #0]
		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // each pin has two bit to set this, that is why the shift by two
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	795b      	ldrb	r3, [r3, #5]
 80003ea:	461a      	mov	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	791b      	ldrb	r3, [r3, #4]
 80003f0:	005b      	lsls	r3, r3, #1
 80003f2:	fa02 f303 	lsl.w	r3, r2, r3
 80003f6:	613b      	str	r3, [r7, #16]
		// Now we set only the bits of interest using or logic
		pGPIOHandle->pGPIOx->MODER |= temp;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	6819      	ldr	r1, [r3, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	693a      	ldr	r2, [r7, #16]
 8000404:	430a      	orrs	r2, r1
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	e0d5      	b.n	80005b6 <GPIO_Init+0x1fe>
	}else
	{
		// interrupt mode

		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	795b      	ldrb	r3, [r3, #5]
 800040e:	2b04      	cmp	r3, #4
 8000410:	d117      	bne.n	8000442 <GPIO_Init+0x8a>
		{
			// 1. configure the falling trigger selection register
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000412:	4b4b      	ldr	r3, [pc, #300]	; (8000540 <GPIO_Init+0x188>)
 8000414:	68db      	ldr	r3, [r3, #12]
 8000416:	687a      	ldr	r2, [r7, #4]
 8000418:	7912      	ldrb	r2, [r2, #4]
 800041a:	4611      	mov	r1, r2
 800041c:	2201      	movs	r2, #1
 800041e:	408a      	lsls	r2, r1
 8000420:	4611      	mov	r1, r2
 8000422:	4a47      	ldr	r2, [pc, #284]	; (8000540 <GPIO_Init+0x188>)
 8000424:	430b      	orrs	r3, r1
 8000426:	60d3      	str	r3, [r2, #12]
			// clear the RTSR bit just in case it might be set
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000428:	4b45      	ldr	r3, [pc, #276]	; (8000540 <GPIO_Init+0x188>)
 800042a:	689b      	ldr	r3, [r3, #8]
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	7912      	ldrb	r2, [r2, #4]
 8000430:	4611      	mov	r1, r2
 8000432:	2201      	movs	r2, #1
 8000434:	408a      	lsls	r2, r1
 8000436:	43d2      	mvns	r2, r2
 8000438:	4611      	mov	r1, r2
 800043a:	4a41      	ldr	r2, [pc, #260]	; (8000540 <GPIO_Init+0x188>)
 800043c:	400b      	ands	r3, r1
 800043e:	6093      	str	r3, [r2, #8]
 8000440:	e035      	b.n	80004ae <GPIO_Init+0xf6>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	795b      	ldrb	r3, [r3, #5]
 8000446:	2b05      	cmp	r3, #5
 8000448:	d117      	bne.n	800047a <GPIO_Init+0xc2>
		{
			// 1. configure the rising trigger selection register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800044a:	4b3d      	ldr	r3, [pc, #244]	; (8000540 <GPIO_Init+0x188>)
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	7912      	ldrb	r2, [r2, #4]
 8000452:	4611      	mov	r1, r2
 8000454:	2201      	movs	r2, #1
 8000456:	408a      	lsls	r2, r1
 8000458:	4611      	mov	r1, r2
 800045a:	4a39      	ldr	r2, [pc, #228]	; (8000540 <GPIO_Init+0x188>)
 800045c:	430b      	orrs	r3, r1
 800045e:	6093      	str	r3, [r2, #8]
			// clear the FTSR bit just in case it might be set
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000460:	4b37      	ldr	r3, [pc, #220]	; (8000540 <GPIO_Init+0x188>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	7912      	ldrb	r2, [r2, #4]
 8000468:	4611      	mov	r1, r2
 800046a:	2201      	movs	r2, #1
 800046c:	408a      	lsls	r2, r1
 800046e:	43d2      	mvns	r2, r2
 8000470:	4611      	mov	r1, r2
 8000472:	4a33      	ldr	r2, [pc, #204]	; (8000540 <GPIO_Init+0x188>)
 8000474:	400b      	ands	r3, r1
 8000476:	60d3      	str	r3, [r2, #12]
 8000478:	e019      	b.n	80004ae <GPIO_Init+0xf6>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	795b      	ldrb	r3, [r3, #5]
 800047e:	2b06      	cmp	r3, #6
 8000480:	d115      	bne.n	80004ae <GPIO_Init+0xf6>
		{
			// 1. configure the falling/rising trigger selection register
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000482:	4b2f      	ldr	r3, [pc, #188]	; (8000540 <GPIO_Init+0x188>)
 8000484:	689b      	ldr	r3, [r3, #8]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	7912      	ldrb	r2, [r2, #4]
 800048a:	4611      	mov	r1, r2
 800048c:	2201      	movs	r2, #1
 800048e:	408a      	lsls	r2, r1
 8000490:	4611      	mov	r1, r2
 8000492:	4a2b      	ldr	r2, [pc, #172]	; (8000540 <GPIO_Init+0x188>)
 8000494:	430b      	orrs	r3, r1
 8000496:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000498:	4b29      	ldr	r3, [pc, #164]	; (8000540 <GPIO_Init+0x188>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	7912      	ldrb	r2, [r2, #4]
 80004a0:	4611      	mov	r1, r2
 80004a2:	2201      	movs	r2, #1
 80004a4:	408a      	lsls	r2, r1
 80004a6:	4611      	mov	r1, r2
 80004a8:	4a25      	ldr	r2, [pc, #148]	; (8000540 <GPIO_Init+0x188>)
 80004aa:	430b      	orrs	r3, r1
 80004ac:	60d3      	str	r3, [r2, #12]

		}

		// 2. configure GPIO port selection in SYSCFG_EXTICR
		uint8_t regNum;		// 0 = EXTI 0 1 2 3, 1 = EXTI 4 5 6 7, etc
		regNum = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4;	// 0 to 3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	791b      	ldrb	r3, [r3, #4]
 80004b2:	089b      	lsrs	r3, r3, #2
 80004b4:	75fb      	strb	r3, [r7, #23]
		uint8_t extiPos;
		extiPos = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4)*4; // 0 4 8 12, four positions in EXTIx register, with x = regNum
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	f003 0303 	and.w	r3, r3, #3
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	75bb      	strb	r3, [r7, #22]
		// enable syscfg peripheral clock
		SYSCFG_PCLK_EN();
 80004c4:	4b1f      	ldr	r3, [pc, #124]	; (8000544 <GPIO_Init+0x18c>)
 80004c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c8:	4a1e      	ldr	r2, [pc, #120]	; (8000544 <GPIO_Init+0x18c>)
 80004ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ce:	6453      	str	r3, [r2, #68]	; 0x44
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx); // get the port
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a1c      	ldr	r2, [pc, #112]	; (8000548 <GPIO_Init+0x190>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d046      	beq.n	8000568 <GPIO_Init+0x1b0>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a1b      	ldr	r2, [pc, #108]	; (800054c <GPIO_Init+0x194>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d02b      	beq.n	800053c <GPIO_Init+0x184>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a19      	ldr	r2, [pc, #100]	; (8000550 <GPIO_Init+0x198>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d024      	beq.n	8000538 <GPIO_Init+0x180>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <GPIO_Init+0x19c>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d01d      	beq.n	8000534 <GPIO_Init+0x17c>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a16      	ldr	r2, [pc, #88]	; (8000558 <GPIO_Init+0x1a0>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d016      	beq.n	8000530 <GPIO_Init+0x178>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a15      	ldr	r2, [pc, #84]	; (800055c <GPIO_Init+0x1a4>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d00f      	beq.n	800052c <GPIO_Init+0x174>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a13      	ldr	r2, [pc, #76]	; (8000560 <GPIO_Init+0x1a8>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d008      	beq.n	8000528 <GPIO_Init+0x170>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a12      	ldr	r2, [pc, #72]	; (8000564 <GPIO_Init+0x1ac>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d101      	bne.n	8000524 <GPIO_Init+0x16c>
 8000520:	2307      	movs	r3, #7
 8000522:	e022      	b.n	800056a <GPIO_Init+0x1b2>
 8000524:	2308      	movs	r3, #8
 8000526:	e020      	b.n	800056a <GPIO_Init+0x1b2>
 8000528:	2306      	movs	r3, #6
 800052a:	e01e      	b.n	800056a <GPIO_Init+0x1b2>
 800052c:	2305      	movs	r3, #5
 800052e:	e01c      	b.n	800056a <GPIO_Init+0x1b2>
 8000530:	2304      	movs	r3, #4
 8000532:	e01a      	b.n	800056a <GPIO_Init+0x1b2>
 8000534:	2303      	movs	r3, #3
 8000536:	e018      	b.n	800056a <GPIO_Init+0x1b2>
 8000538:	2302      	movs	r3, #2
 800053a:	e016      	b.n	800056a <GPIO_Init+0x1b2>
 800053c:	2301      	movs	r3, #1
 800053e:	e014      	b.n	800056a <GPIO_Init+0x1b2>
 8000540:	40013c00 	.word	0x40013c00
 8000544:	40023800 	.word	0x40023800
 8000548:	40020000 	.word	0x40020000
 800054c:	40020400 	.word	0x40020400
 8000550:	40020800 	.word	0x40020800
 8000554:	40020c00 	.word	0x40020c00
 8000558:	40021000 	.word	0x40021000
 800055c:	40021400 	.word	0x40021400
 8000560:	40021800 	.word	0x40021800
 8000564:	40021c00 	.word	0x40021c00
 8000568:	2300      	movs	r3, #0
 800056a:	757b      	strb	r3, [r7, #21]

		SYSCFG->EXTICR[regNum] &= ~(0xF << extiPos); // clear
 800056c:	4a62      	ldr	r2, [pc, #392]	; (80006f8 <GPIO_Init+0x340>)
 800056e:	7dfb      	ldrb	r3, [r7, #23]
 8000570:	3302      	adds	r3, #2
 8000572:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000576:	7dbb      	ldrb	r3, [r7, #22]
 8000578:	210f      	movs	r1, #15
 800057a:	fa01 f303 	lsl.w	r3, r1, r3
 800057e:	43db      	mvns	r3, r3
 8000580:	4618      	mov	r0, r3
 8000582:	495d      	ldr	r1, [pc, #372]	; (80006f8 <GPIO_Init+0x340>)
 8000584:	7dfb      	ldrb	r3, [r7, #23]
 8000586:	4002      	ands	r2, r0
 8000588:	3302      	adds	r3, #2
 800058a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[regNum] = portCode << extiPos; //  set
 800058e:	7d7a      	ldrb	r2, [r7, #21]
 8000590:	7dbb      	ldrb	r3, [r7, #22]
 8000592:	fa02 f103 	lsl.w	r1, r2, r3
 8000596:	4a58      	ldr	r2, [pc, #352]	; (80006f8 <GPIO_Init+0x340>)
 8000598:	7dfb      	ldrb	r3, [r7, #23]
 800059a:	3302      	adds	r3, #2
 800059c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// enable the exti interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a0:	4b56      	ldr	r3, [pc, #344]	; (80006fc <GPIO_Init+0x344>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	7912      	ldrb	r2, [r2, #4]
 80005a8:	4611      	mov	r1, r2
 80005aa:	2201      	movs	r2, #1
 80005ac:	408a      	lsls	r2, r1
 80005ae:	4611      	mov	r1, r2
 80005b0:	4a52      	ldr	r2, [pc, #328]	; (80006fc <GPIO_Init+0x344>)
 80005b2:	430b      	orrs	r3, r1
 80005b4:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]

	//2. configure speed
	// Need to reset the bit first before we set them
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	689a      	ldr	r2, [r3, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	2103      	movs	r1, #3
 80005c8:	fa01 f303 	lsl.w	r3, r1, r3
 80005cc:	43db      	mvns	r3, r3
 80005ce:	4619      	mov	r1, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	400a      	ands	r2, r1
 80005d6:	609a      	str	r2, [r3, #8]
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // each pin has two bit to set this, that is why the shift by two
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	799b      	ldrb	r3, [r3, #6]
 80005dc:	461a      	mov	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	791b      	ldrb	r3, [r3, #4]
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	fa02 f303 	lsl.w	r3, r2, r3
 80005e8:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	6899      	ldr	r1, [r3, #8]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	693a      	ldr	r2, [r7, #16]
 80005f6:	430a      	orrs	r2, r1
 80005f8:	609a      	str	r2, [r3, #8]
	temp=0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
	//3. configure pupd
	// Need to reset the bit first before we set them
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	68da      	ldr	r2, [r3, #12]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	2103      	movs	r1, #3
 800060c:	fa01 f303 	lsl.w	r3, r1, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	4619      	mov	r1, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	400a      	ands	r2, r1
 800061a:	60da      	str	r2, [r3, #12]
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // each pin has two bit to set this, that is why the shift by two
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	79db      	ldrb	r3, [r3, #7]
 8000620:	461a      	mov	r2, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	68d9      	ldr	r1, [r3, #12]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	693a      	ldr	r2, [r7, #16]
 800063a:	430a      	orrs	r2, r1
 800063c:	60da      	str	r2, [r3, #12]
	temp=0;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
	//4. configure optype
	// Need to reset the bit first before we set them
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	4619      	mov	r1, r3
 800064e:	2301      	movs	r3, #1
 8000650:	408b      	lsls	r3, r1
 8000652:	43db      	mvns	r3, r3
 8000654:	4619      	mov	r1, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	400a      	ands	r2, r1
 800065c:	605a      	str	r2, [r3, #4]
	temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) ); // each pin has two bit to set this, that is why the shift by two
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	7a1b      	ldrb	r3, [r3, #8]
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	6859      	ldr	r1, [r3, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	693a      	ldr	r2, [r7, #16]
 800067a:	430a      	orrs	r2, r1
 800067c:	605a      	str	r2, [r3, #4]
	temp=0;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
	//5. configure alt functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	795b      	ldrb	r3, [r3, #5]
 8000686:	2b02      	cmp	r3, #2
 8000688:	d130      	bne.n	80006ec <GPIO_Init+0x334>
	{
		// configure the alternate mode function registers
		uint8_t afr_H_or_L, regPos;

		afr_H_or_L = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; // less than 8 will be zero (lower register)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	08db      	lsrs	r3, r3, #3
 8000690:	73fb      	strb	r3, [r7, #15]
		regPos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8; // mod: left over of division
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	73bb      	strb	r3, [r7, #14]

		// need to reset the 4 bits before we set them
		pGPIOHandle->pGPIOx->AFR[afr_H_or_L] &= ~( 0xF << (regPos) );
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	7bfa      	ldrb	r2, [r7, #15]
 80006a2:	3208      	adds	r2, #8
 80006a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	220f      	movs	r2, #15
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	43db      	mvns	r3, r3
 80006b2:	4618      	mov	r0, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	7bfa      	ldrb	r2, [r7, #15]
 80006ba:	4001      	ands	r1, r0
 80006bc:	3208      	adds	r2, #8
 80006be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pGPIOHandle->pGPIOx->AFR[afr_H_or_L] |= ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunType << (4*regPos) );
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	7bfa      	ldrb	r2, [r7, #15]
 80006c8:	3208      	adds	r2, #8
 80006ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	7a5b      	ldrb	r3, [r3, #9]
 80006d2:	461a      	mov	r2, r3
 80006d4:	7bbb      	ldrb	r3, [r7, #14]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	4618      	mov	r0, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	7bfa      	ldrb	r2, [r7, #15]
 80006e4:	4301      	orrs	r1, r0
 80006e6:	3208      	adds	r2, #8
 80006e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80006ec:	bf00      	nop
 80006ee:	371c      	adds	r7, #28
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	40013800 	.word	0x40013800
 80006fc:	40013c00 	.word	0x40013c00

08000700 <GPIO_ToggleOutputPin>:
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value)
{
	pGPIOx->ODR = Value;
}
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	70fb      	strb	r3, [r7, #3]
	// XOR to toggle the pin number bit
	pGPIOx->ODR ^= (1 << PinNumber);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	78fa      	ldrb	r2, [r7, #3]
 8000712:	2101      	movs	r1, #1
 8000714:	fa01 f202 	lsl.w	r2, r1, r2
 8000718:	405a      	eors	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	615a      	str	r2, [r3, #20]
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <GPIO_IRQInterruptConfig>:
// IRQ number Configuration,
// configured to an max IRQ number of 95
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t enorDi)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	460a      	mov	r2, r1
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	4613      	mov	r3, r2
 800073a:	71bb      	strb	r3, [r7, #6]
	if (enorDi == ENABLE)
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d133      	bne.n	80007aa <GPIO_IRQInterruptConfig+0x7e>
	{
		if (IRQNumber <= 31)
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	2b1f      	cmp	r3, #31
 8000746:	d80a      	bhi.n	800075e <GPIO_IRQInterruptConfig+0x32>
		{
			// program Interrup set enable register (ISER0) register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000748:	4b35      	ldr	r3, [pc, #212]	; (8000820 <GPIO_IRQInterruptConfig+0xf4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	79fa      	ldrb	r2, [r7, #7]
 800074e:	2101      	movs	r1, #1
 8000750:	fa01 f202 	lsl.w	r2, r1, r2
 8000754:	4611      	mov	r1, r2
 8000756:	4a32      	ldr	r2, [pc, #200]	; (8000820 <GPIO_IRQInterruptConfig+0xf4>)
 8000758:	430b      	orrs	r3, r1
 800075a:	6013      	str	r3, [r2, #0]
		{
			// program ICER2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 800075c:	e059      	b.n	8000812 <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber > 31 && IRQNumber < 64)
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b1f      	cmp	r3, #31
 8000762:	d90f      	bls.n	8000784 <GPIO_IRQInterruptConfig+0x58>
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b3f      	cmp	r3, #63	; 0x3f
 8000768:	d80c      	bhi.n	8000784 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800076a:	4b2e      	ldr	r3, [pc, #184]	; (8000824 <GPIO_IRQInterruptConfig+0xf8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	79fa      	ldrb	r2, [r7, #7]
 8000770:	f002 021f 	and.w	r2, r2, #31
 8000774:	2101      	movs	r1, #1
 8000776:	fa01 f202 	lsl.w	r2, r1, r2
 800077a:	4611      	mov	r1, r2
 800077c:	4a29      	ldr	r2, [pc, #164]	; (8000824 <GPIO_IRQInterruptConfig+0xf8>)
 800077e:	430b      	orrs	r3, r1
 8000780:	6013      	str	r3, [r2, #0]
 8000782:	e046      	b.n	8000812 <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber >= 64 && IRQNumber < 96)
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2b3f      	cmp	r3, #63	; 0x3f
 8000788:	d943      	bls.n	8000812 <GPIO_IRQInterruptConfig+0xe6>
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b5f      	cmp	r3, #95	; 0x5f
 800078e:	d840      	bhi.n	8000812 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000790:	4b25      	ldr	r3, [pc, #148]	; (8000828 <GPIO_IRQInterruptConfig+0xfc>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	79fa      	ldrb	r2, [r7, #7]
 8000796:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800079a:	2101      	movs	r1, #1
 800079c:	fa01 f202 	lsl.w	r2, r1, r2
 80007a0:	4611      	mov	r1, r2
 80007a2:	4a21      	ldr	r2, [pc, #132]	; (8000828 <GPIO_IRQInterruptConfig+0xfc>)
 80007a4:	430b      	orrs	r3, r1
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	e033      	b.n	8000812 <GPIO_IRQInterruptConfig+0xe6>
		if (IRQNumber <= 31)
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b1f      	cmp	r3, #31
 80007ae:	d80a      	bhi.n	80007c6 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <GPIO_IRQInterruptConfig+0x100>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	79fa      	ldrb	r2, [r7, #7]
 80007b6:	2101      	movs	r1, #1
 80007b8:	fa01 f202 	lsl.w	r2, r1, r2
 80007bc:	4611      	mov	r1, r2
 80007be:	4a1b      	ldr	r2, [pc, #108]	; (800082c <GPIO_IRQInterruptConfig+0x100>)
 80007c0:	430b      	orrs	r3, r1
 80007c2:	6013      	str	r3, [r2, #0]
}
 80007c4:	e025      	b.n	8000812 <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber > 31 && IRQNumber < 64)
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b1f      	cmp	r3, #31
 80007ca:	d90f      	bls.n	80007ec <GPIO_IRQInterruptConfig+0xc0>
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b3f      	cmp	r3, #63	; 0x3f
 80007d0:	d80c      	bhi.n	80007ec <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <GPIO_IRQInterruptConfig+0x104>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	79fa      	ldrb	r2, [r7, #7]
 80007d8:	f002 021f 	and.w	r2, r2, #31
 80007dc:	2101      	movs	r1, #1
 80007de:	fa01 f202 	lsl.w	r2, r1, r2
 80007e2:	4611      	mov	r1, r2
 80007e4:	4a12      	ldr	r2, [pc, #72]	; (8000830 <GPIO_IRQInterruptConfig+0x104>)
 80007e6:	430b      	orrs	r3, r1
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	e012      	b.n	8000812 <GPIO_IRQInterruptConfig+0xe6>
		}else if (IRQNumber >= 64 && IRQNumber < 96)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b3f      	cmp	r3, #63	; 0x3f
 80007f0:	d90f      	bls.n	8000812 <GPIO_IRQInterruptConfig+0xe6>
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b5f      	cmp	r3, #95	; 0x5f
 80007f6:	d80c      	bhi.n	8000812 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <GPIO_IRQInterruptConfig+0x108>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000802:	2101      	movs	r1, #1
 8000804:	fa01 f202 	lsl.w	r2, r1, r2
 8000808:	4611      	mov	r1, r2
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <GPIO_IRQInterruptConfig+0x108>)
 800080c:	430b      	orrs	r3, r1
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	e7ff      	b.n	8000812 <GPIO_IRQInterruptConfig+0xe6>
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000e100 	.word	0xe000e100
 8000824:	e000e104 	.word	0xe000e104
 8000828:	e000e108 	.word	0xe000e108
 800082c:	e000e180 	.word	0xe000e180
 8000830:	e000e184 	.word	0xe000e184
 8000834:	e000e188 	.word	0xe000e188

08000838 <GPIO_IRQPriorityConfig>:

// IRQ priority configuration
void GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint32_t IRQPriority)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
	// find out the IPR register, interrupt priority register
	uint8_t iprx = IRQNumber / 4;			// 4 IRQ numbers per register, 8 bits for each IRQ number
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	089b      	lsrs	r3, r3, #2
 8000848:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4; 	// each IPR register has 4 sections, each section is 8 bits
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	f003 0303 	and.w	r3, r3, #3
 8000850:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED); // 8 bit section, 4 bits implemented, so we need to shift 4 bits to the left
 8000852:	7bbb      	ldrb	r3, [r7, #14]
 8000854:	00db      	lsls	r3, r3, #3
 8000856:	b2db      	uxtb	r3, r3
 8000858:	3304      	adds	r3, #4
 800085a:	737b      	strb	r3, [r7, #13]
	// pointer arithmetic, because NVIC_IPR_BASEADDR is a 32 bit pointer, when we add iprx we are moving to the next 32 bit register
	*(NVIC_PR_BASEADDR + iprx) |= (IRQPriority << shift_amount);
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000864:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000868:	6819      	ldr	r1, [r3, #0]
 800086a:	7b7b      	ldrb	r3, [r7, #13]
 800086c:	683a      	ldr	r2, [r7, #0]
 800086e:	409a      	lsls	r2, r3
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000878:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800087c:	430a      	orrs	r2, r1
 800087e:	601a      	str	r2, [r3, #0]
}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t PinNumber)	// whenever an interrupt occurs the use user application can call this function to process the interrupt
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	// clear the exti pr register corresponding to the pin number
	if (EXTI->PR & (1 << PinNumber)) // return zero if that pin is zero otherwise return some number greater than zero
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <GPIO_IRQHandling+0x3c>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	2101      	movs	r1, #1
 800089e:	fa01 f202 	lsl.w	r2, r1, r2
 80008a2:	4013      	ands	r3, r2
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d009      	beq.n	80008bc <GPIO_IRQHandling+0x30>
	{
		// clear
		EXTI->PR |= (1 << PinNumber);
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <GPIO_IRQHandling+0x3c>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	79fa      	ldrb	r2, [r7, #7]
 80008ae:	2101      	movs	r1, #1
 80008b0:	fa01 f202 	lsl.w	r2, r1, r2
 80008b4:	4611      	mov	r1, r2
 80008b6:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <GPIO_IRQHandling+0x3c>)
 80008b8:	430b      	orrs	r3, r1
 80008ba:	6153      	str	r3, [r2, #20]
	}
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	40013c00 	.word	0x40013c00

080008cc <Delay>:
 */
#include "stm32f407xx.h"
#include "stm32f407xx_gpio_driver.h" // this could go inside stm32f407xx.h and then be called from that header file

void Delay(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
	for (uint32_t i =0; i<200000; i++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	e002      	b.n	80008de <Delay+0x12>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3301      	adds	r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <Delay+0x28>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d9f8      	bls.n	80008d8 <Delay+0xc>
	{

	}
}
 80008e6:	bf00      	nop
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	00030d3f 	.word	0x00030d3f

080008f8 <main>:

// Variable to toggle direction
uint8_t ledDirection = 0;

int main (void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b090      	sub	sp, #64	; 0x40
 80008fc:	af00      	add	r7, sp, #0
	// Green LED
	GPIO_Handle_t gpioLed;
	// initialize variable
	gpioLed.pGPIOx = GPIOD; // port to use
 80008fe:	4b50      	ldr	r3, [pc, #320]	; (8000a40 <main+0x148>)
 8000900:	637b      	str	r3, [r7, #52]	; 0x34
	gpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12; // macro GPIO_PIN_NO_12 only available after inclusion of stm32f407xx_gpio_driver.h
 8000902:	230c      	movs	r3, #12
 8000904:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	gpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000908:	2301      	movs	r3, #1
 800090a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	gpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800090e:	2303      	movs	r3, #3
 8000910:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	gpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000914:	2300      	movs	r3, #0
 8000916:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	gpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800091a:	2300      	movs	r3, #0
 800091c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	// Orange LED
	GPIO_Handle_t gpioLedOrange;
	// initialize variable
	gpioLedOrange.pGPIOx = GPIOD; // port to use
 8000920:	4b47      	ldr	r3, [pc, #284]	; (8000a40 <main+0x148>)
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
	gpioLedOrange.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13; // macro GPIO_PIN_NO_12 only available after inclusion of stm32f407xx_gpio_driver.h
 8000924:	230d      	movs	r3, #13
 8000926:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	gpioLedOrange.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800092a:	2301      	movs	r3, #1
 800092c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	gpioLedOrange.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000930:	2303      	movs	r3, #3
 8000932:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	gpioLedOrange.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000936:	2300      	movs	r3, #0
 8000938:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	gpioLedOrange.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800093c:	2300      	movs	r3, #0
 800093e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	// Red LED
	GPIO_Handle_t gpioLedRed;
	// initialize variable
	gpioLedRed.pGPIOx = GPIOD; // port to use
 8000942:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <main+0x148>)
 8000944:	61fb      	str	r3, [r7, #28]
	gpioLedRed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14; // macro GPIO_PIN_NO_12 only available after inclusion of stm32f407xx_gpio_driver.h
 8000946:	230e      	movs	r3, #14
 8000948:	f887 3020 	strb.w	r3, [r7, #32]
	gpioLedRed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800094c:	2301      	movs	r3, #1
 800094e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	gpioLedRed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000952:	2303      	movs	r3, #3
 8000954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	gpioLedRed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000958:	2300      	movs	r3, #0
 800095a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	gpioLedRed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800095e:	2300      	movs	r3, #0
 8000960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	// Blue LED
	GPIO_Handle_t gpioLedBlue;
	// initialize variable
	gpioLedBlue.pGPIOx = GPIOD; // port to use
 8000964:	4b36      	ldr	r3, [pc, #216]	; (8000a40 <main+0x148>)
 8000966:	613b      	str	r3, [r7, #16]
	gpioLedBlue.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15; // macro GPIO_PIN_NO_12 only available after inclusion of stm32f407xx_gpio_driver.h
 8000968:	230f      	movs	r3, #15
 800096a:	753b      	strb	r3, [r7, #20]
	gpioLedBlue.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800096c:	2301      	movs	r3, #1
 800096e:	757b      	strb	r3, [r7, #21]
	gpioLedBlue.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000970:	2303      	movs	r3, #3
 8000972:	75bb      	strb	r3, [r7, #22]
	gpioLedBlue.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000974:	2300      	movs	r3, #0
 8000976:	763b      	strb	r3, [r7, #24]
	gpioLedBlue.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000978:	2300      	movs	r3, #0
 800097a:	75fb      	strb	r3, [r7, #23]

	// Button
	GPIO_Handle_t gpioButton;
	// initialize variable
	gpioButton.pGPIOx = GPIOA; // port to use
 800097c:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <main+0x14c>)
 800097e:	607b      	str	r3, [r7, #4]
	gpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0; // macro GPIO_PIN_NO_12 only available after inclusion of stm32f407xx_gpio_driver.h
 8000980:	2300      	movs	r3, #0
 8000982:	723b      	strb	r3, [r7, #8]
	gpioButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RT; // interrupt rising edge trigger mode
 8000984:	2305      	movs	r3, #5
 8000986:	727b      	strb	r3, [r7, #9]
	gpioButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000988:	2303      	movs	r3, #3
 800098a:	72bb      	strb	r3, [r7, #10]
	//gpioButton.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP; // not applicable when mode is input
	gpioButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800098c:	2300      	movs	r3, #0
 800098e:	72fb      	strb	r3, [r7, #11]


	// initialize clock peripherals
	GPIO_PeriClockControl(GPIOD, ENABLE);
 8000990:	2101      	movs	r1, #1
 8000992:	482b      	ldr	r0, [pc, #172]	; (8000a40 <main+0x148>)
 8000994:	f7ff fc28 	bl	80001e8 <GPIO_PeriClockControl>
	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000998:	2101      	movs	r1, #1
 800099a:	482a      	ldr	r0, [pc, #168]	; (8000a44 <main+0x14c>)
 800099c:	f7ff fc24 	bl	80001e8 <GPIO_PeriClockControl>

	// Initialize GPIO
	GPIO_Init(&gpioLed);
 80009a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fd07 	bl	80003b8 <GPIO_Init>
	// Initialize orange
	GPIO_Init(&gpioLedOrange);
 80009aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fd02 	bl	80003b8 <GPIO_Init>
	// Initialize Red
	GPIO_Init(&gpioLedRed);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fcfd 	bl	80003b8 <GPIO_Init>
	// Initialize Blue
	GPIO_Init(&gpioLedBlue);
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fcf8 	bl	80003b8 <GPIO_Init>
	// Initialize button on PA0
	GPIO_Init(&gpioButton);
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fcf4 	bl	80003b8 <GPIO_Init>

	// IRQ configuration for PA0, rising edge
	// PA0 is connected to EXTI0, so we need to configure EXTI0
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, NVIC_IRQ_PRI15);
 80009d0:	210f      	movs	r1, #15
 80009d2:	2006      	movs	r0, #6
 80009d4:	f7ff ff30 	bl	8000838 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, ENABLE);
 80009d8:	2101      	movs	r1, #1
 80009da:	2006      	movs	r0, #6
 80009dc:	f7ff fea6 	bl	800072c <GPIO_IRQInterruptConfig>

	
	// toggle the LEDs
	while(1)
	{
		if (ledDirection == 0)
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <main+0x150>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d118      	bne.n	8000a1a <main+0x122>
		{
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 80009e8:	210c      	movs	r1, #12
 80009ea:	4815      	ldr	r0, [pc, #84]	; (8000a40 <main+0x148>)
 80009ec:	f7ff fe88 	bl	8000700 <GPIO_ToggleOutputPin>
			Delay(); // Create a lazy SW delay
 80009f0:	f7ff ff6c 	bl	80008cc <Delay>
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_13);
 80009f4:	210d      	movs	r1, #13
 80009f6:	4812      	ldr	r0, [pc, #72]	; (8000a40 <main+0x148>)
 80009f8:	f7ff fe82 	bl	8000700 <GPIO_ToggleOutputPin>
			Delay();
 80009fc:	f7ff ff66 	bl	80008cc <Delay>
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_14);
 8000a00:	210e      	movs	r1, #14
 8000a02:	480f      	ldr	r0, [pc, #60]	; (8000a40 <main+0x148>)
 8000a04:	f7ff fe7c 	bl	8000700 <GPIO_ToggleOutputPin>
			Delay();
 8000a08:	f7ff ff60 	bl	80008cc <Delay>
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_15);
 8000a0c:	210f      	movs	r1, #15
 8000a0e:	480c      	ldr	r0, [pc, #48]	; (8000a40 <main+0x148>)
 8000a10:	f7ff fe76 	bl	8000700 <GPIO_ToggleOutputPin>
			Delay();
 8000a14:	f7ff ff5a 	bl	80008cc <Delay>
 8000a18:	e7e2      	b.n	80009e0 <main+0xe8>
		}else
		{
			Delay();
 8000a1a:	f7ff ff57 	bl	80008cc <Delay>
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_15);
 8000a1e:	210f      	movs	r1, #15
 8000a20:	4807      	ldr	r0, [pc, #28]	; (8000a40 <main+0x148>)
 8000a22:	f7ff fe6d 	bl	8000700 <GPIO_ToggleOutputPin>
			//Delay(); // Create a lazy SW delay
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_14);
 8000a26:	210e      	movs	r1, #14
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <main+0x148>)
 8000a2a:	f7ff fe69 	bl	8000700 <GPIO_ToggleOutputPin>
			//Delay();
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_13);
 8000a2e:	210d      	movs	r1, #13
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <main+0x148>)
 8000a32:	f7ff fe65 	bl	8000700 <GPIO_ToggleOutputPin>
			//Delay();
			GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 8000a36:	210c      	movs	r1, #12
 8000a38:	4801      	ldr	r0, [pc, #4]	; (8000a40 <main+0x148>)
 8000a3a:	f7ff fe61 	bl	8000700 <GPIO_ToggleOutputPin>
		if (ledDirection == 0)
 8000a3e:	e7cf      	b.n	80009e0 <main+0xe8>
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	40020000 	.word	0x40020000
 8000a48:	2000001c 	.word	0x2000001c

08000a4c <EXTI0_IRQHandler>:
	}
	return 0;
}

void EXTI0_IRQHandler(void) // IRQ handler for GPIOA pin 0, overriden from .weak on startup_stm32f407xx.s
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

	GPIO_IRQHandling(GPIO_PIN_NO_0); // clear the pending event from the exti line
 8000a50:	2000      	movs	r0, #0
 8000a52:	f7ff ff1b 	bl	800088c <GPIO_IRQHandling>
	
	// toggle the LED direction from 0 to 1 or 1 to 0
	if (ledDirection == 0)
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <EXTI0_IRQHandler+0x24>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d103      	bne.n	8000a66 <EXTI0_IRQHandler+0x1a>
	{
		ledDirection = 1;
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <EXTI0_IRQHandler+0x24>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
	}else
	{
		ledDirection = 0;
	}

}
 8000a64:	e002      	b.n	8000a6c <EXTI0_IRQHandler+0x20>
		ledDirection = 0;
 8000a66:	4b02      	ldr	r3, [pc, #8]	; (8000a70 <EXTI0_IRQHandler+0x24>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000001c 	.word	0x2000001c

08000a74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a78:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	; (8000ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <LoopForever+0xe>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	; (8000ac0 <LoopForever+0x16>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aa2:	f000 f811 	bl	8000ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aa6:	f7ff ff27 	bl	80008f8 <main>

08000aaa <LoopForever>:

LoopForever:
  b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
  ldr   r0, =_estack
 8000aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ab8:	08000b30 	.word	0x08000b30
  ldr r2, =_sbss
 8000abc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ac0:	20000020 	.word	0x20000020

08000ac4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>
	...

08000ac8 <__libc_init_array>:
 8000ac8:	b570      	push	{r4, r5, r6, lr}
 8000aca:	4d0d      	ldr	r5, [pc, #52]	; (8000b00 <__libc_init_array+0x38>)
 8000acc:	4c0d      	ldr	r4, [pc, #52]	; (8000b04 <__libc_init_array+0x3c>)
 8000ace:	1b64      	subs	r4, r4, r5
 8000ad0:	10a4      	asrs	r4, r4, #2
 8000ad2:	2600      	movs	r6, #0
 8000ad4:	42a6      	cmp	r6, r4
 8000ad6:	d109      	bne.n	8000aec <__libc_init_array+0x24>
 8000ad8:	4d0b      	ldr	r5, [pc, #44]	; (8000b08 <__libc_init_array+0x40>)
 8000ada:	4c0c      	ldr	r4, [pc, #48]	; (8000b0c <__libc_init_array+0x44>)
 8000adc:	f000 f818 	bl	8000b10 <_init>
 8000ae0:	1b64      	subs	r4, r4, r5
 8000ae2:	10a4      	asrs	r4, r4, #2
 8000ae4:	2600      	movs	r6, #0
 8000ae6:	42a6      	cmp	r6, r4
 8000ae8:	d105      	bne.n	8000af6 <__libc_init_array+0x2e>
 8000aea:	bd70      	pop	{r4, r5, r6, pc}
 8000aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8000af0:	4798      	blx	r3
 8000af2:	3601      	adds	r6, #1
 8000af4:	e7ee      	b.n	8000ad4 <__libc_init_array+0xc>
 8000af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000afa:	4798      	blx	r3
 8000afc:	3601      	adds	r6, #1
 8000afe:	e7f2      	b.n	8000ae6 <__libc_init_array+0x1e>
 8000b00:	08000b28 	.word	0x08000b28
 8000b04:	08000b28 	.word	0x08000b28
 8000b08:	08000b28 	.word	0x08000b28
 8000b0c:	08000b2c 	.word	0x08000b2c

08000b10 <_init>:
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	bf00      	nop
 8000b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b16:	bc08      	pop	{r3}
 8000b18:	469e      	mov	lr, r3
 8000b1a:	4770      	bx	lr

08000b1c <_fini>:
 8000b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b1e:	bf00      	nop
 8000b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b22:	bc08      	pop	{r3}
 8000b24:	469e      	mov	lr, r3
 8000b26:	4770      	bx	lr
